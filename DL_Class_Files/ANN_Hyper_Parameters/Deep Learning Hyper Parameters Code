{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Deep Learning Hyper Parameters Code","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOHJS+Z9ed3IqnaWrxhQ/uR"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"NNtiIBUqKH_v"},"source":["[statinfer.com](https://statinfer.com/)"]},{"cell_type":"code","metadata":{"id":"rUySjtSFLvF_"},"source":["### To install keras and tensorflow\n","#!pip install tensorflow\n","#!pip install keras\n","\n","#import the required packages\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zEIG-BVMLjLK"},"source":["#L1 and L2 Regularization"]},{"cell_type":"code","metadata":{"id":"RfQ72eGtMPav"},"source":["## MNIST data The data, shuffled and split between train and test sets\n","(X_train, Y_train), (X_test, Y_test) = keras.datasets.mnist.load_data()\n","num_classes=10\n","x_train = X_train.reshape(60000, 784)\n","x_test = X_test.reshape(10000, 784)\n","x_train = x_train.astype('float32')\n","x_test = x_test.astype('float32')\n","x_train /= 255\n","x_test /= 255\n","\n","## Convert class vectors to binary class matrices\n","y_train = keras.utils.to_categorical(Y_train, num_classes)\n","y_test = keras.utils.to_categorical(Y_test, num_classes)\n","\n","print(x_train.shape, 'train input samples')\n","print(x_test.shape, 'test input samples')\n","\n","print(y_train.shape, 'train output samples')\n","print(y_test.shape, 'test output samples')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e0UfuOi5KHLP"},"source":["from tensorflow.keras import regularizers\n","model_r = keras.Sequential()\n","model_r.add(layers.Dense(256, input_shape=(784,), kernel_regularizer=regularizers.l2(0.01)))\n","model_r.add(layers.Dense(128, kernel_regularizer=regularizers.l2(0.01)))\n","model_r.add(layers.Dense(10, activation='softmax'))\n","model_r.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WUqaWmztKJM4"},"source":["model_r.compile(loss='categorical_crossentropy', metrics=['accuracy'])\n","model_r.fit(x_train, y_train,epochs=10)\n","\n","#Final Results\n","loss, acc = model_r.evaluate(x_train,  y_train, verbose=2)\n","print(\"Train Accuracy: {:5.2f}%\".format(100*acc))\n","\n","loss, acc = model_r.evaluate(x_test,  y_test, verbose=2)\n","print(\"Test Accuracy: {:5.2f}%\".format(100*acc))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LfZrCKr_RgBz"},"source":["# Dropout Regularization"]},{"cell_type":"code","metadata":{"id":"SgQq3gr9MWyg"},"source":["from tensorflow.keras.layers import Dropout\n","model_rd = keras.Sequential()\n","\n","model_rd.add(layers.Dense(256, activation='sigmoid', input_shape=(784,)))\n","model_rd.add(Dropout(0.7))\n","\n","model_rd.add(layers.Dense(128, activation='sigmoid'))\n","model_rd.add(Dropout(0.6))\n","\n","model_rd.add(layers.Dense(10, activation='softmax'))\n","model_rd.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wu5xDS75RiPV"},"source":["model_rd.compile(loss='categorical_crossentropy', metrics=['accuracy'])\n","model_rd.fit(x_train, y_train,epochs=10)\n","\n","#Final Results\n","loss, acc = model_rd.evaluate(x_train,  y_train, verbose=2)\n","print(\"Train Accuracy: {:5.2f}%\".format(100*acc))\n","\n","loss, acc = model_rd.evaluate(x_test,  y_test, verbose=2)\n","print(\"Test Accuracy: {:5.2f}%\".format(100*acc))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d1nIS3CoS3-y"},"source":["# Activation Functions"]},{"cell_type":"code","metadata":{"id":"ZSUcvRhZRm5J"},"source":["model2 = keras.Sequential()\n","model2.add(layers.Dense(15, activation='sigmoid', input_shape=(784,)))\n","model2.add(layers.Dense(15, activation='relu'))\n","model2.add(layers.Dense(15, activation='tanh'))\n","model2.add(layers.Dense(15, activation='relu'))\n","model2.add(layers.Dense(10, activation='softmax'))\n","model2.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"melVThhMS9qh"},"source":["model2.compile(loss='categorical_crossentropy', metrics=['accuracy'])\n","model2.fit(x_train, y_train,epochs=10)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XLacK89ZUfks"},"source":["# Learning Rate"]},{"cell_type":"markdown","metadata":{"id":"PYAAFxH3WRRj"},"source":["### Very High Learning Rate"]},{"cell_type":"code","metadata":{"id":"9BhfKYrRU4uO"},"source":["model3 = keras.Sequential()\n","model3.add(layers.Dense(20, activation='sigmoid', input_shape=(784,)))\n","model3.add(layers.Dense(20, activation='sigmoid'))\n","model3.add(layers.Dense(10, activation='softmax'))\n","model3.summary()\n","\n","#High Learning Rate\n","opt_new = tf.keras.optimizers.SGD(learning_rate=10)\n","model3.compile(optimizer=opt_new, loss='categorical_crossentropy', metrics=['accuracy'])\n","model3.fit(x_train, y_train,epochs=20)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8s5WNpWlVE5w"},"source":["### Very Low Learning Rate"]},{"cell_type":"code","metadata":{"id":"gXxbgteKLNUm"},"source":["model3 = keras.Sequential()\n","model3.add(layers.Dense(20, activation='sigmoid', input_shape=(784,)))\n","model3.add(layers.Dense(20, activation='sigmoid'))\n","model3.add(layers.Dense(10, activation='softmax'))\n","\n","#Low learning rate\n","opt_new = tf.keras.optimizers.SGD(learning_rate=0.00001)\n","model3.compile(optimizer=opt_new, loss='categorical_crossentropy', metrics=['accuracy'])\n","model3.fit(x_train, y_train,epochs=20)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fvA-N03162as"},"source":["### Optimal Learning rate "]},{"cell_type":"code","metadata":{"id":"FEPgHMkXLNUo"},"source":["model3 = keras.Sequential()\n","model3.add(layers.Dense(20, activation='sigmoid', input_shape=(784,)))\n","model3.add(layers.Dense(20, activation='sigmoid'))\n","model3.add(layers.Dense(10, activation='softmax'))\n","\n","#Optimal learning rate\n","opt_new = tf.keras.optimizers.SGD(learning_rate=0.01)\n","model3.compile(optimizer=opt_new, loss='categorical_crossentropy', metrics=['accuracy'])\n","model3.fit(x_train, y_train,epochs=20)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vWMyk5HFJ5tm"},"source":["# GD, SGD and Mini-batch GD"]},{"cell_type":"markdown","metadata":{"id":"SEjIO1mIJ5tv"},"source":["### SGD\n","\n","* GD uses full data in single iteration of epoch, SGD uses multiple batch iteration of data in each epoch"]},{"cell_type":"code","metadata":{"id":"jUL29pqGJ5tv"},"source":["#Same DNN with 2 layers\n","model9 = Sequential()\n","model9.add(Dense(10, kernel_initializer='normal', activation='sigmoid',input_shape=(784,)))\n","model9.add(Dense(10, activation='sigmoid'))\n","model9.add(Dense(num_classes, activation='softmax'))\n","\n","#Stochastic Gradient Descent\n","sgd = tf.keras.optimizers.SGD(lr=0.1)\n","\n","#compile the model\n","model9.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"JAtbIImSJ5ty","cellView":"both"},"source":["%%time\n","### batch size parameter : to make it stochastic\n","batch_size = 1\n","\n","#train the network\n","model9.fit(x_train, y_train,batch_size=batch_size,epochs=2,validation_data=(x_test, y_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"03crY16qJ5t1"},"source":["#get the score on train data\n","score9_1 = model9.evaluate(x_train, y_train, verbose=0)\n","print('Train accuracy:', score9_1[1])\n","\n","#get the score\n","score9_2 = model9.evaluate(x_test, y_test, verbose=0)\n","print('Test accuracy:', score9_2[1])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9J__wWnHJ5t4"},"source":["### minibatch batch size 128"]},{"cell_type":"code","metadata":{"id":"_5pDTiinJ5t4"},"source":["#same DNN with 2 layers\n","model9 = Sequential()\n","model9.add(Dense(10, kernel_initializer='normal', activation='sigmoid',input_shape=(784,)))\n","model9.add(Dense(10, activation='sigmoid'))\n","model9.add(Dense(num_classes, activation='softmax'))\n","\n","#Stochastic Gradient Descent\n","sgd = tf.keras.optimizers.SGD(lr=0.1)\n","\n","#compile the model\n","model9.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n","\n","#no of epochs\n","epochs = 30"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"cTe9_fmnJ5t7"},"source":["%%time\n","\n","batch_size = 256\n","#1000(rows) --> Batch size around - 50 (nearby power of 2 - 64)\n","#5%-10%\n","#train the network\n","model9.fit(x_train, y_train,batch_size=batch_size,epochs=epochs,validation_data=(x_test, y_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5TS_n-uwJ5t-"},"source":["#get the score on train data\n","score9_1 = model9.evaluate(x_train, y_train, verbose=0)\n","print('Train accuracy:', score9_1[1])\n","\n","#get the score\n","score9_2 = model9.evaluate(x_test, y_test, verbose=0)\n","print('Test accuracy:', score9_2[1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1I-E92kKJ5uB"},"source":[""],"execution_count":null,"outputs":[]}]}